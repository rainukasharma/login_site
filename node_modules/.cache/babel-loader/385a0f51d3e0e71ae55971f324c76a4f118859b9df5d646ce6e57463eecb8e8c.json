{"ast":null,"code":"var _jsxFileName = \"/home/renuka/Desktop/Login Website/src/store/auth-context.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nuseEffect(() => {\n  const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n  if (storedUserLoggedInInformation === \"1\") {\n    setIsLoggedIn(true);\n  }\n}, []);\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {}\n});\nexport default AuthContext;\nexport const AuthContextProvider = props => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContextProvider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler,\n      onLogin: loginHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"g0MSgNVZk+vKiEFnDJ9VPEfswFA=\");\n_c = AuthContextProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","storedUserLoggedInInformation","localStorage","getItem","setIsLoggedIn","AuthContext","createContext","isLoggedIn","onLogout","AuthContextProvider","props","_s","loginHandler","email","password","setItem","logoutHandler","removeItem","value","onLogin","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/renuka/Desktop/Login Website/src/store/auth-context.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nuseEffect(() => {\n  const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n\n  if (storedUserLoggedInInformation === \"1\") {\n    setIsLoggedIn(true);\n  }\n}, []);\n\nconst AuthContext = React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n});\nexport default AuthContext;\n\nexport const AuthContextProvider = (props) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n  return (\n    <AuthContextProvider\n      value={{ isLoggedIn: isLoggedIn, onLogout: logoutHandler , onLogin : loginHandler }}\n    >\n      {props.children}\n    </AuthContextProvider>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnDF,SAAS,CAAC,MAAM;EACd,MAAMG,6BAA6B,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAExE,IAAIF,6BAA6B,KAAK,GAAG,EAAE;IACzCG,aAAa,CAAC,IAAI,CAAC;EACrB;AACF,CAAC,EAAE,EAAE,CAAC;AAEN,MAAMC,WAAW,gBAAGT,KAAK,CAACU,aAAa,CAAC;EACtCC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAEA,CAAA,KAAM,CAAC;AACnB,CAAC,CAAC;AACF,eAAeH,WAAW;AAE1B,OAAO,MAAMI,mBAAmB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC5C,MAAM,CAACJ,UAAU,EAAEH,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMe,YAAY,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACxC;IACA;IACAZ,YAAY,CAACa,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;IACvCX,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,MAAMY,aAAa,GAAGA,CAAA,KAAM;IAC1Bd,YAAY,CAACe,UAAU,CAAC,YAAY,CAAC;IACrCb,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;EACD,oBACEJ,OAAA,CAACS,mBAAmB;IAClBS,KAAK,EAAE;MAAEX,UAAU,EAAEA,UAAU;MAAEC,QAAQ,EAAEQ,aAAa;MAAGG,OAAO,EAAGP;IAAa,CAAE;IAAAQ,QAAA,EAEnFV,KAAK,CAACU;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAE1B,CAAC;AAACb,EAAA,CArBWF,mBAAmB;AAAAgB,EAAA,GAAnBhB,mBAAmB;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}