{"ast":null,"code":"var _jsxFileName = \"/home/renuka/Desktop/Login Website/src/store/auth-context.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nuseEffect(() => {\n  const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n  if (storedUserLoggedInInformation === \"1\") {\n    setIsLoggedIn(true);\n  }\n}, []);\nconst loginHandler = (email, password) => {\n  // We should of course check email and password\n  // But it's just a dummy/ demo anyways\n  localStorage.setItem(\"isLoggedIn\", \"1\");\n  setIsLoggedIn(true);\n};\nconst logoutHandler = () => {\n  localStorage.removeItem('isLoggedIn');\n  setIsLoggedIn(false);\n};\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogout: () => {}\n});\nexport default AuthContext;\nexport const AuthContextProvider = props => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  return /*#__PURE__*/_jsxDEV(AuthContextProvider, {\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 13\n  }, this);\n};\n_s(AuthContextProvider, \"g0MSgNVZk+vKiEFnDJ9VPEfswFA=\");\n_c = AuthContextProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","storedUserLoggedInInformation","localStorage","getItem","setIsLoggedIn","loginHandler","email","password","setItem","logoutHandler","removeItem","AuthContext","createContext","isLoggedIn","onLogout","AuthContextProvider","props","_s","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/renuka/Desktop/Login Website/src/store/auth-context.js"],"sourcesContent":["import React, {useState, useEffect}from \"react\";\n\n\n  \nuseEffect(() => {\n\n  const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n\n  if (storedUserLoggedInInformation === \"1\") {\n    setIsLoggedIn(true);\n  }\n}, []);\n\nconst loginHandler = (email, password) => {\n  // We should of course check email and password\n  // But it's just a dummy/ demo anyways\n  localStorage.setItem(\"isLoggedIn\", \"1\");\n  setIsLoggedIn(true);\n};\n\nconst logoutHandler = () => {\n  localStorage.removeItem('isLoggedIn')\n  setIsLoggedIn(false);\n};\n\nconst AuthContext = React.createContext({\n    isLoggedIn : false,\n    onLogout : () => {},\n});\nexport default AuthContext;\n\nexport const AuthContextProvider = (props) => {\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n    return( <AuthContextProvider>\n        {props.children}\n    </AuthContextProvider>\n    )\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIhDF,SAAS,CAAC,MAAM;EAEd,MAAMG,6BAA6B,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAExE,IAAIF,6BAA6B,KAAK,GAAG,EAAE;IACzCG,aAAa,CAAC,IAAI,CAAC;EACrB;AACF,CAAC,EAAE,EAAE,CAAC;AAEN,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACxC;EACA;EACAL,YAAY,CAACM,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC;EACvCJ,aAAa,CAAC,IAAI,CAAC;AACrB,CAAC;AAED,MAAMK,aAAa,GAAGA,CAAA,KAAM;EAC1BP,YAAY,CAACQ,UAAU,CAAC,YAAY,CAAC;EACrCN,aAAa,CAAC,KAAK,CAAC;AACtB,CAAC;AAED,MAAMO,WAAW,gBAAGf,KAAK,CAACgB,aAAa,CAAC;EACpCC,UAAU,EAAG,KAAK;EAClBC,QAAQ,EAAGA,CAAA,KAAM,CAAC;AACtB,CAAC,CAAC;AACF,eAAeH,WAAW;AAE1B,OAAO,MAAMI,mBAAmB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC1C,MAAM,CAACJ,UAAU,EAAET,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACnD,oBAAQG,OAAA,CAACe,mBAAmB;IAAAG,QAAA,EACvBF,KAAK,CAACE;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAE1B,CAAC;AAACL,EAAA,CANWF,mBAAmB;AAAAQ,EAAA,GAAnBR,mBAAmB;AAAA,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}